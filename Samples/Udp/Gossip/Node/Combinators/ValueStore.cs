//===========================================================================
// MODULE:  ValueStore.cs
// PURPOSE: UDP gossip sample value storage combinator
// 
// Copyright © 2012
// Brent M. Spell. All rights reserved.
//
// This library is free software; you can redistribute it and/or modify it 
// under the terms of the GNU Lesser General Public License as published 
// by the Free Software Foundation; either version 3 of the License, or 
// (at your option) any later version. This library is distributed in the 
// hope that it will be useful, but WITHOUT ANY WARRANTY; without even the 
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
// See the GNU Lesser General Public License for more details. You should 
// have received a copy of the GNU Lesser General Public License along with 
// this library; if not, write to 
//    Free Software Foundation, Inc. 
//    51 Franklin Street, Fifth Floor 
//    Boston, MA 02110-1301 USA
//===========================================================================
// System References
using System;
using System.Collections.Generic;
// Project References

namespace WcfEx.Samples.Gossip.Combinators
{
   /// <summary>
   /// The value storage combinator
   /// </summary>
   /// <remarks>
   /// This combinator implements a simple means of storing and replicating
   /// a value across the gossip mesh. It provides "last wins" conflict 
   /// semantics based on the update time of the item, as generated by the 
   /// clock on the originating node.
   /// If the value was updated and is successfully propagated to this node 
   /// and was updated, then the combinator will excite its contagion 
   /// factor, rapidly spreading it across the mesh. Otherwise, it will 
   /// suppress its spread.
   /// </remarks>
   public sealed class ValueStore : ICombinator
   {
      #region ICombinator Implementation
      /// <summary>
      /// Combinator item factory
      /// </summary>
      /// <param name="key">
      /// The new item's key
      /// </param>
      /// <returns>
      /// The generated item
      /// </returns>
      public Item Create (String key)
      {
         return new Item(key);
      }
      /// <summary>
      /// Generates no items, as all stored values come in externally
      /// </summary>
      /// <param name="ns">
      /// The generated item's namespace
      /// </param>
      /// <returns>
      /// None
      /// </returns>
      public IEnumerable<Item> Generate (String ns)
      {
         yield break;
      }
      /// <summary>
      /// Combines an existing item with a stored item
      /// </summary>
      /// <param name="store">
      /// The stored item to combine
      /// </param>
      /// <param name="input">
      /// The incoming item to combine
      /// </param>
      /// <param name="output">
      /// The result of the combination operation
      /// </param>
      /// <returns>
      /// True if the combination was successful
      /// False otherwise
      /// </returns>
      public Boolean Combine (Item store, Item input, out Item output)
      {
         var combined = false;
         // determine whether to combine
         // . if input's updated date is greater than store,
         //   accept the input value and spread it
         // . if the input's updated date is less than store,
         //   reject the value and spread it
         // . if both updated dates are equal, suppress the
         //   spread of the item, as the nodes have converged
         // . always return the resulting stored value as the 
         //   output, so that the peer will converge to the same
         var compare = input.Updated.CompareTo(store.Updated);
         if (compare != 0)
         {
            if (compare > 0)
            {
               store.Data = input.Data;
               store.Created = input.Created;
               store.Updated = input.Updated;
               combined = true;
            }
            store.Contagion = 1;
         }
         output = store;
         return combined;
      }
      #endregion
   }
}
